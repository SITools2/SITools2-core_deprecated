<sva>
  <id>6b08108c-7b27-4198-9aa5-6f353c9cedd3</id>
  <name>HtmlExportSva</name>
  <description>HTML export on the fly</description>
  <className>fr.cnes.sitools.sva.basic.HtmlExportSva</className>
  <classVersion>1.0</classVersion>
  <classAuthor>AKKA/CNES</classAuthor>
  <parameters/>
  <parametersMap class="java.util.concurrent.ConcurrentHashMap" serialization="custom">
    <unserializable-parents/>
    <java.util.concurrent.ConcurrentHashMap>
      <default>
        <segmentMask>15</segmentMask>
        <segmentShift>28</segmentShift>
        <segments>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
        </segments>
      </default>
      <string>title</string>
      <svaParameter>
        <name>title</name>
        <description>htmlTitle</description>
        <value>toto</value>
        <parameterType>PARAMETER_INTERN</parameterType>
        <attachedColumn></attachedColumn>
      </svaParameter>
      <string>max_rows</string>
      <svaParameter>
        <name>max_rows</name>
        <description>Set max_rows=0 to export everything</description>
        <value>300</value>
        <parameterType>PARAMETER_INTERN</parameterType>
        <attachedColumn></attachedColumn>
      </svaParameter>
      <null/>
      <null/>
    </java.util.concurrent.ConcurrentHashMap>
  </parametersMap>
  <parent>e9d5215a-c58c-49ff-9d71-aa93d344c4bc</parent>
  <runType>SVA_FORCE_RUN_SYNC</runType>
  <image>
    <type>Image</type>
    <url></url>
    <mediaType>Image</mediaType>
  </image>
  <label>html</label>
  <specificFolder>true</specificFolder>
  <status>ACTIVE</status>
  <method>GET</method>
</sva>